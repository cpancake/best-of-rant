[%:ListA+1;e;1;c;0;6;9;3;4;9;e;7] # 1st list. Size 12
[%:ListB+2;4;4;5;5] # 2nd list. Size 5

# (5 - 5^(2 - 1 -1))
# Size of ListB - Size of ListB to the power of
# index of the item with value (Size of ListB - 1)
# blablabla in short what it says is: 
# Size of ListB - 1
# Repeats 4 times in this case. 
# Below pattern appends crap so that ListB becomes 12 in size.
[r:`[%ListB$]-[%ListB$]^([%ListB@?`[%ListB$]-1`]-1)`]
{
	[%ListB+^[rc]] #Prepend the repcount. 
    [notlast:[%ListB+[rc]]] #Append repcount if not last
    						#repetition iteration. 
}

#Subroutine below that creates \u and two 0s
#so "\u00". Repeates two times. Because 2X/X = 2
[$[ListB]:\\\u0075[r:`([%ListB$]+[%ListA$])/[%ListA$]`]
{
	`[%ListB$]-[%ListA$]` # 12 - 12 = 0
}]

#Meta pattern used to encode the UTF-8 string.
#\u0041 -> A etc...
[?[r:[%ListB$]]
{
	[$ListB] #Subroutine call to create \u00
    [%ListB@[ri]] #\u00 F    [ri] = repeater index
    [%ListA@[ri]] #\u00 FF
}]
